substitutions:
  device_name: "esp32-epaper"
  friendly_name: "ESP32 ePaper"
  
esphome:
  name: "${device_name}"
  platform: ESP32
  board: esp32dev
  on_boot:
    priority: -100.0
    then: 
      - if:
          condition:
            lambda: 'return id(next_page)==0;'
          then:
            - display.page.show: page_image
      - if:
          condition:
            lambda: 'return id(next_page)==1;'
          then:
            - display.page.show: page_temps
      - if:
          condition:
            lambda: 'return id(next_page)==2;'
          then:
            - display.page.show: page_humidity
      - if:
          condition:
            lambda: 'return id(next_page)==3;'
          then:
            - display.page.show: page_weather
            - lambda: 'id(next_page) = -1;'
      - lambda: 'id(next_page)++;'
      - delay: 5s
      - if:
          condition:
            binary_sensor.is_on: prevent_deep_sleep
          then:
            - logger.log: "Deep sleep: Disabled"
            - deep_sleep.prevent: deep_sleep_1
      - display.page.show: page_crypto
wifi:
  ssid: !secret wifi_iot_ssid
  password: !secret wifi_password
  domain: ".lan"

  manual_ip:
    static_ip: 192.168.1.195
    gateway: 192.168.1.254
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32 Epaper Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

spi:
  clk_pin: 18
  mosi_pin: 23

globals:
  - id: next_page
    restore_value: yes
    initial_value: "0"
    type: int
    
font:
  - file: 'fonts/consola.ttf'
    id: consola_s
    size: 18
  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_m
    size: 20
  - file: 'fonts/OpenSans-Bold.ttf'
    id: sans_xl
    glyphs: '£+-.0123456789'
    size: 36   
  - file: 'fonts/OpenSans-Medium.ttf'
    id: sans_m
    glyphs: '£+-.0123456789()'
    size: 20   
  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_l
    glyphs: '!/"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'''
    size: 28
  - file: 'fonts/Roboto-Bold.ttf'
    id: roboto_bold_xs
    glyphs: 'Update :0123456789'
    size: 16
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font_l
    size: 75
    glyphs: [
      "\U000F0590",
      "\U000F0F2F",
      "\U000F0591",
      "\U000F0592",
      "\U000F0593",
      "\U000F067E",
      "\U000F0594",
      "\U000F0595",
      "\U000F0596",
      "\U000F0597",
      "\U000F0598",
      "\U000F067F",
      "\U000F0599",
      "\U000F059D",
      "\U000F059E",
      "\U000F0CE1", # up
      "\U000F0047", # down 
      "\U000F0FE1"  # horizontal
    ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font
    size: 35
    glyphs: [
      "\U000F0510",
      "\U000F058E",
      "\U000F059D"
    ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font_small
    size: 24
    glyphs: [
      "\U000F0510",
      "\U000F058E"
    ]
  
button:
  - platform: restart
    name: "${friendly_name} Restart"
    
time:
  - platform: homeassistant
    id: esptime
        
script:
  - id: all_data_received
    then:
      - component.update: epaper
text_sensor:
  - platform: homeassistant
    id: weather_day0_condition
    entity_id: sensor.weather_condition
    internal: true
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      icon: mdi:wifi
      entity_category: diagnostic
    ssid:
      name: "${friendly_name} Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
binary_sensor:
  - platform: homeassistant
    id: garage_door
    entity_id: binary_sensor.garage_door
    internal: true    
  - platform: gpio
    pin: GPIO39
    name: "ePaper Prev Page"
    on_press:
      then:
        - display.page.show_previous: epaper
        - component.update: epaper  
  - platform: homeassistant
    id: prevent_deep_sleep
    name: Prevent Deep Sleep
    internal: true
    entity_id: input_boolean.prevent_deep_sleep
    on_state:
      - if:
          condition:
            binary_sensor.is_on: prevent_deep_sleep
          then:
            - logger.log: "Deep sleep: Disabled from sensor toggle."
            - deep_sleep.prevent: deep_sleep_1
      - if:
          condition:
            binary_sensor.is_off: prevent_deep_sleep
          then:
            - deep_sleep.enter: deep_sleep_1
            
sensor:
  - platform: homeassistant
    id: crypto_change
    entity_id: 'sensor.crypto_portfolio_change'
  - platform: homeassistant
    id: crypto_portfolio
    entity_id: 'sensor.coinbase_portfolio_balance'
    on_value:
      then:
        - script.execute: all_data_received 
  - platform: homeassistant
    id: bed1_temp
    entity_id: sensor.bed1_temperature
    internal: true    
  - platform: homeassistant
    id: bed2_temp
    entity_id: sensor.office_temperature
    internal: true    
  - platform: homeassistant
    id: reu_temp
    entity_id: sensor.reu_d1_temperature
    internal: true
  - platform: homeassistant
    id: seb_temp
    entity_id: sensor.seb_d1_temperature
    internal: true
  - platform: homeassistant
    id: bath_temp
    entity_id: sensor.bathroom_temperature
    internal: true
  - platform: homeassistant
    id: ensuite_temp
    entity_id: sensor.ensuite_temperature
    internal: true
  - platform: homeassistant
    id: lounge_temp
    entity_id: sensor.living_room_temp
    internal: true
  - platform: homeassistant
    id: bed1_humidity
    entity_id: sensor.bed1_humidity
    internal: true
  - platform: homeassistant
    id: bed2_humidity
    entity_id: sensor.office_humidity
    internal: true
  - platform: homeassistant
    id: seb_humidity
    entity_id: sensor.seb_humidity
    internal: true
  - platform: homeassistant
    id: bath_humidity
    entity_id: sensor.bathroom_humidity
    internal: true
  - platform: homeassistant
    id: ensuite_humidity
    entity_id: sensor.ensuite_humidity
    internal: true
  - platform: homeassistant
    id: lounge_humidity
    entity_id: sensor.living_room_humidity
    internal: true
  - platform: homeassistant
    id: weather_day0_temperature
    entity_id: sensor.weather_temperature
    internal: true
  - platform: homeassistant
    id: weather_day0_humidity
    entity_id: sensor.weather_humidity
    internal: true
  - platform: homeassistant
    id: weather_day0_windspeed
    entity_id: sensor.weather_windspeed
    internal: true

image:
  - file: "images/tom.png"
    id: tom
    resize: 100x100
    
display:
  - platform: waveshare_epaper
    cs_pin: 5
    dc_pin: 17
    busy_pin: 4
    reset_pin: 16
    model: 2.13in-ttgo-b73
    rotation: 90°
    full_update_every: 10
    update_interval: 15s
    id: epaper

    pages:
      - id: page_crypto
        lambda: |-
          std::string changeIcon = "\000F0FE1";
          std::string change = "";
          if (id(crypto_change).state > 0) {
            changeIcon = "\U000F0CE1";
            change = "+%.2f";
          } else if (id(crypto_change).state < 0) {
            changeIcon = "\U000F0047";
            change = "(%.2f)";
          }
          it.printf(80, 61, id(icon_font_l), TextAlign::CENTER_RIGHT, changeIcon.c_str());
          if (id(crypto_portfolio).has_state()) {
            it.printf(80, 70, id(sans_xl), TextAlign::BOTTOM_LEFT, "£%.2f", id(crypto_portfolio).state);
          }
          it.printf(80, 70, id(sans_m), TextAlign::TOP_LEFT, change.c_str(), id(crypto_change).state);
          it.strftime(250, 125, id(roboto_bold_xs), COLOR_ON, TextAlign::BOTTOM_RIGHT , "Updated: %H:%M", id(esptime).now());
      - id: page_image
        lambda: |-
          it.image(5, 20, id(tom));
          it.print(125, 66, id(roboto_l), TextAlign::CENTER, "Tom D'Roza");
          
          it.filled_rectangle(0, 105, 250, 122);
          it.strftime(250, 125, id(roboto_bold_xs), COLOR_OFF, TextAlign::BOTTOM_RIGHT , "Updated: %H:%M", id(esptime).now());
      - id: page_temps
        lambda: |-
          it.printf(0, 0, id(roboto_m), TextAlign::TOP_LEFT, "Bath:");
          it.printf(115, 0, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", (id(bath_temp).has_state()?id(bath_temp).state:0.0));
          it.printf(125, 0, id(roboto_m), TextAlign::TOP_LEFT, "Ensuite:");
          it.printf(249, 0, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(ensuite_temp).has_state()?id(ensuite_temp).state:0.0);
          it.printf(0, 25, id(roboto_m), TextAlign::TOP_LEFT, "Bed1:");
          it.printf(115, 25, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(bed1_temp).has_state()?id(bed1_temp).state:0.0);
          it.printf(125, 25, id(roboto_m), TextAlign::TOP_LEFT, "Office:");
          it.printf(249, 25, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(bed2_temp).has_state()?id(bed2_temp).state:0.0);
          it.printf(0, 50, id(roboto_m), TextAlign::TOP_LEFT, "Bed3:");
          it.printf(115, 50, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(seb_temp).has_state()?id(seb_temp).state:0.0);
          it.printf(125, 50, id(roboto_m), TextAlign::TOP_LEFT, "Bed4:");
          it.printf(249, 50, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(reu_temp).has_state()?id(reu_temp).state:0.0);
          it.printf(0, 75, id(roboto_m), TextAlign::TOP_LEFT, "Lounge:");
          it.printf(115, 75, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(lounge_temp).has_state()?id(lounge_temp).state:0.0);
          it.printf(249, 75, id(icon_font_small), TextAlign::TOP_RIGHT, "\U000F0510");
          
          it.filled_rectangle(0, 105, 250, 122);
          it.strftime(250, 125, id(roboto_bold_xs), COLOR_OFF, TextAlign::BOTTOM_RIGHT , "Updated: %H:%M", id(esptime).now());
      - id: page_humidity
        lambda: |-
          it.printf(0, 0, id(roboto_m), TextAlign::TOP_LEFT , "Bath:");
          it.printf(115, 0, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", (id(bath_humidity).has_state()?id(bath_humidity).state:0.0));
          it.printf(125, 0, id(roboto_m), TextAlign::TOP_LEFT, "Ensuite:");
          it.printf(249, 0, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", id(ensuite_humidity).has_state()?id(ensuite_humidity).state:0.0);
          it.printf(0, 25, id(roboto_m), TextAlign::TOP_LEFT, "Bed1:");
          it.printf(115, 25, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", id(bed1_humidity).has_state()?id(bed1_humidity).state:0.0);
          it.printf(125, 25, id(roboto_m), TextAlign::TOP_LEFT, "Office:");
          it.printf(249, 25, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", id(bed2_humidity).has_state()?id(bed2_humidity).state:0.0);
          it.printf(0, 50, id(roboto_m), TextAlign::TOP_LEFT, "Lounge:");
          it.printf(115, 50, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", id(lounge_humidity).has_state()?id(lounge_humidity).state:0.0);
          it.printf(0, 75, id(roboto_m), TextAlign::TOP_LEFT, "Garage: %s", id(garage_door).state?"Open":"Closed");
          it.printf(249, 75, id(icon_font_small), TextAlign::TOP_RIGHT, "\U000F058E");
          
          it.filled_rectangle(0, 105, 250, 122);
          it.strftime(250, 125, id(roboto_bold_xs), COLOR_OFF, TextAlign::BOTTOM_RIGHT , "Updated: %H:%M", id(esptime).now());

      - id: page_weather
        lambda: |-
          // "\U000F0510" thermometer-lines              
          // "\U000F058E" water-percent
          // "\U000F059D" weather-windy
          it.filled_rectangle(0, 0, 125, 122);
          it.printf(0, 5, id(icon_font), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F0510");
          it.printf(34, 43, id(roboto_l), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%.1f", id(weather_day0_temperature).has_state()?id(weather_day0_temperature).state:0.0);
          it.printf(123, 40, id(consola_s), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "°C");
          it.printf(0, 41, id(icon_font), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F058E");
          it.printf(34, 78, id(roboto_l), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%.1f", id(weather_day0_humidity).has_state()?id(weather_day0_humidity).state:0.0);
          it.printf(123, 75, id(consola_s), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "%%");
          it.printf(0, 76, id(icon_font), COLOR_OFF, TextAlign::TOP_LEFT, "\U000F059D");
          it.printf(34, 113, id(roboto_l), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%.1f", id(weather_day0_windspeed).has_state()?id(weather_day0_windspeed).state:0.0);
          it.printf(123, 110, id(consola_s), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "kmh");
          if (id(weather_day0_condition).has_state()) {
            std::map<std::string, std::string> weather_map { 
                  { "cloudy", "\U000F0590" },              
                  { "exceptional", "\U000F0F2F" },          
                  { "fog", "\U000F0591" },                 
                  { "hail", "\U000F0592" },                
                  { "lightning", "\U000F0593" },            
                  { "lightning_rainy", "\U000F067E" },      
                  { "clearnight", "\U000F0594" },         
                  { "partlycloudy", "\U000F0595" },         
                  { "pouring", "\U000F0596"},             
                  { "rainy", "\U000F0597" },                
                  { "snowy", "\U000F0598" },               
                  { "snowyrainy", "\U000F067F" },           
                  { "sunny", "\U000F0599" },                  
                  { "windy", "\U000F059D" },               
                  { "windyvariant", "\U000F059E" }         
            };   
            it.printf(190, 60, id(icon_font_l), COLOR_ON, TextAlign::CENTER, weather_map[id(weather_day0_condition).state.c_str()].c_str());
          };
                  
          char* weather_state = strdup(id(weather_day0_condition).state.c_str());
          weather_state[0] = toupper(weather_state[0]);
          it.printf(190, 1, id(roboto_m), TextAlign::TOP_CENTER, "%s",  weather_state);
          
          it.strftime(250, 125, id(roboto_bold_xs), COLOR_ON, TextAlign::BOTTOM_RIGHT , "Updated: %H:%M", id(esptime).now());
          
deep_sleep:
  run_duration: 90sec
  sleep_duration: 5min
  id: deep_sleep_1
  
#interval:
#  - interval: 60s
#    then:
#      - display.page.show_next: epaper
#      - component.update: epaper        
