substitutions:
  device_name: "epaper-t5"
  friendly_name: "ePaper T5"
  run_time: 2min
  sleep_time: 5min # normal sleep time

globals:
  - id: current_page
    restore_value: yes
    initial_value: "1"
    type: int
  - id: updates_since_refresh
    restore_value: yes
    initial_value: "0"
    type: int
  - id: shutting_down
    restore_value: no
    initial_value: "false"
    type: boolean
    
esphome:
  name: "${device_name}"
  on_shutdown:
    then:
      - lambda: |-
          id(shutting_down) = true;
      - script.execute: show_page


esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Epaper T5 Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

time:
  - platform: homeassistant
    id: ntp
    on_time:
      - hours: 18
        then:
          - logger.log: "Entering night time sleep, triggered by time"
          - display.page.show: page_sleep
          - component.update: t5_display
          - delay: 5s
          - deep_sleep.enter:
              id: deep_sleep_1
              sleep_duration: 12h

external_components:
  - source: github://ashald/esphome@lilygo-t5-47
    components:
      - lilygo_t5_47
 
sun:
  latitude: 53.839696824370925°
  longitude: -1.7784009354721835°  
  
font:
  - file: "fonts/OpenSans-Bold.ttf"
    id: font_name
    size: 38
    glyphs: |-
      !"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "fonts/OpenSans-Medium.ttf"
    id: font_value
    size: 56    
    glyphs: |-
      £!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  
  - file: "fonts/OpenSans-Medium.ttf"
    id: font_footer
    size: 28    
    glyphs: |-
      !"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font
    size: 160
    glyphs: [
      "\U000F0590",
      "\U000F0F2F",
      "\U000F0591",
      "\U000F0592",
      "\U000F0593",
      "\U000F067E",
      "\U000F0594",
      "\U000F0595",
      "\U000F0596",
      "\U000F0597",
      "\U000F0598",
      "\U000F067F",
      "\U000F0599",
      "\U000F059D",
      "\U000F059E"
    ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons_small
    size: 56
    glyphs:
        - "\U000F02E3" # Bed
        - "\U000F09A1" # Shower
        - "\U000F09A0" # Bath
        - "\U000F1104" # Monitor
        - "\U000F0510" # temp
        - "\U000F059D" # wind
        - "\U000F0813" # btc
        - "\U000F086A" # eth
        - "\U000F116B" # sol
        - "\U000F0A61" # ltc
        - "\U000F0A43" # doge
        - "\U000F0178" # xlm
        - "\U000F0CE1" # up
        - "\U000F0047" # down 
        - "\U000F0FE1" # horizontal
        
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons_smaller
    size: 40
    glyphs:
        - "\U000F0510" # temp
        - "\U000F059D" # wind
        - "\U000F059B" # sunset
        - "\U000F059C" # sunrise
        - "\U000F04B2" # sleep
        - "\U000F04B3" # sleep-off        
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons_footer
    size: 30
    glyphs:
        - "\U000F06A5" # power-plug
        - "\U000F140B" # lightning-bolt

script:
  # should only be called from show_page to ensure that page content is loaded after refresh
  - id: refresh_display
    then:
      - repeat:
          count: 1
          then:
          - display.page.show: page_black
          - component.update: t5_display
          - delay: 1s
          - display.page.show: page_white
          - component.update: t5_display
          - delay: 1s
      - lambda: id(updates_since_refresh) = 0;
  - id: all_data_received
    then:
      - script.execute: show_page
      - script.execute: evaluate_sleep
 
  - id: show_page
    then:
      - if: 
          condition:
            lambda: return id(updates_since_refresh) >= 10;
          then:
            - script.execute: refresh_display
      - display.page.show: !lambda |-
          switch(id(current_page)) {
            case 1:
              return id(page_temps);
              break;
            case 2:
             return id(page_crypto);
              break;
            case 3:
              return id(page_crypto_graph);
            case 4: 
            default:
              return id(page_time_quote);
          }
    
      - component.update: t5_display
      - lambda: |-
          id(updates_since_refresh)++;
  - id: update_page_in_ha
    then:
      - homeassistant.service:
          service: input_select.select_option
          data_template:
            entity_id: "input_select.epaper_page"
            option: "{{ selected_page }}"
          variables:
            selected_page: |-
              return id(current_page_select).state.c_str();
  - id: evaluate_sleep
    then:
      - logger.log: "Evaluating sleep..."
      - if: 
          condition: 
            lambda: return id(ntp).now().is_valid();
          then:
            - component.update: sunrise
            - component.update: sunset          
      - if:
          condition:
            binary_sensor.is_on: prevent_sleep
          then:
            - logger.log: "Automatic deep sleep DISABLED"
            - deep_sleep.prevent: deep_sleep_1
          else:
            - if:
                condition:
                  lambda: |-
                    if (id(crypto_portfolio).has_state() &&
                      id(crypto_btc).has_state() &&
                      strlen(id(weather_day0_condition).state.c_str())>0 &&
                      id(bed1_temp).has_state()) {
                        return true;
                    }
                    return false;
                then:
                  - lambda: |-
                      id(shutting_down) = true;
                  - logger.log: "All data received. Short sleep duration is ${sleep_time}"     
                  - deep_sleep.allow: deep_sleep_1              
                  - deep_sleep.enter:
                      id: deep_sleep_1
                      sleep_duration: 5min                                       
                else:
                  - logger.log: "Staying awake to wait for data..."
                  - deep_sleep.prevent: deep_sleep_1

text_sensor:
  - platform: homeassistant
    id: quote_text
    entity_id: sensor.time_quotation
    attribute: quote
  - platform: homeassistant
    id: quote_time
    entity_id: sensor.time_quotation
    attribute: timeText
  - platform: homeassistant
    id: quote_title
    entity_id: sensor.time_quotation
    attribute: title
  - platform: homeassistant
    id: quote_author
    entity_id: sensor.time_quotation
    attribute: author
  - platform: homeassistant
    id: current_page_select
    entity_id: input_select.epaper_page
    on_value:
      then:
        - lambda: |-
            if (id(current_page_select).state == "Temperature") {
              id(current_page) = 1;
            } else if (id(current_page_select).state == "Crypto") {
              id(current_page) = 2;
            } else if (id(current_page_select).state == "Graph") {
              id(current_page) = 3;
            } else {
              id(current_page) = 4;
            }
        - script.execute: show_page
        
  - platform: sun
    id: sunrise
    name: Sun Next Sunrise
    type: sunrise
    format: "%H:%M"
    internal: true
    update_interval: never
  
  - platform: sun
    id: sunset
    name: Sun Next Sunset
    type: sunset
    format: "%H:%M"    
    internal: true
    update_interval: never
    
  - platform: homeassistant
    id: crypto_doge
    entity_id: 'sensor.coinbase_doge_wallet'
    attribute: 'Balance in native currency'
    filters:
      - substitute:
        - "GBP -> "
  - platform: homeassistant
    id: crypto_eth
    entity_id: 'sensor.coinbase_eth_wallet'
    attribute: 'Balance in native currency'
    filters:
      - substitute:
        - ' GBP -> '
  - platform: homeassistant
    id: crypto_ltc
    entity_id: 'sensor.coinbase_ltc_wallet'
    attribute: 'Balance in native currency'
    filters:
      - substitute:
        - ' GBP -> '
  - platform: homeassistant
    id: crypto_xlm
    entity_id: 'sensor.coinbase_xlm_wallet'
    attribute: 'Balance in native currency'
    filters:
      - substitute:
        - ' GBP -> '
  - platform: homeassistant
    id: crypto_sol
    entity_id: 'sensor.coinbase_sol_wallet'
    attribute: 'Balance in native currency'
    filters:
      - substitute:
        - ' GBP -> '
  - platform: homeassistant
    id: crypto_btc
    entity_id: 'sensor.coinbase_btc_wallet'
    attribute: 'Balance in native currency'
    filters:
      - substitute:
        - ' GBP -> '
  - platform: homeassistant
    id: weather_day0_condition
    entity_id: sensor.weather_condition
  - platform: homeassistant
    id: calendar_next_title
    entity_id: sensor.calendar_family_next_title
  - platform: homeassistant
    id: calendar_next_start
    entity_id: sensor.calendar_family_next_start
  - platform: homeassistant
    id: music_title
    entity_id: sensor.youtube_music_title
  - platform: homeassistant
    id: music_artist
    entity_id: sensor.youtube_music_artist
    on_value: # Redraw every time music data changes
      then:
        - script.execute: all_data_received  
        
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      icon: mdi:wifi
      entity_category: diagnostic
    ssid:
      name: "${friendly_name} Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic

binary_sensor:
  - platform: status
    name: "${friendly_name}  Status"
  - platform: gpio
    pin: GPIO34
    name: "Temps Page"
    on_press:
      then:
        - lambda: |-
            id(current_page) = 1;
            id(current_page_select).state = "Temperature";    
        - script.execute: update_page_in_ha
        - script.execute: show_page
  - platform: gpio
    pin: GPIO35
    name: "Crypto Page"
    on_press:
      then:
        - lambda: |-
            id(current_page) = 2;
            id(current_page_select).state = "Crypto";
        - script.execute: update_page_in_ha
        - script.execute: show_page

  - platform: homeassistant
    id: prevent_sleep
    entity_id: input_boolean.prevent_deep_sleep
    on_state:
      - script.execute: all_data_received 
      - if:
          condition:
            - binary_sensor.is_on: prevent_sleep
          then:
            - logger.log: "Automatic deep sleep DISABLED"
            - deep_sleep.prevent: deep_sleep_1
          else: 
            - logger.log: "Automatic deep sleep ENABLED"
            - deep_sleep.allow: deep_sleep_1            

      
button:
  - platform: restart
    name: "${friendly_name} Restart"

sensor:
  - id: batt_volt
    name: ${friendly_name} Battery Voltage
    platform: lilygo_t5_47
    device_class: voltage
    state_class: measurement
    unit_of_measurement: V 
  - platform: template
    name: "${friendly_name} Battery"
    id: batt
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    lambda: |-
      int y = (1-(4.1-id(batt_volt).state)/(4.1-2.9))*100;
      if (y > 100) {
        return 100;
      } else if (y < 0) {
        return 0;
      } else {
        return y;
      }
  
  - id: battery
    platform: lilygo_t5_47
  - platform: homeassistant
    id: crypto_change
    entity_id: 'sensor.crypto_daily_change'
  - platform: homeassistant
    id: crypto_portfolio
    entity_id: 'sensor.coinbase_portfolio_balance'
    on_value:
      then:
        - script.execute: all_data_received 
  - platform: homeassistant
    id: weather_day0_temperature
    entity_id: sensor.weather_temperature
  - platform: homeassistant
    id: weather_day0_windspeed
    entity_id: sensor.weather_windspeed
  - platform: homeassistant
    id: bed1_temp
    entity_id: sensor.bed1_temperature
  - platform: homeassistant
    id: bed2_temp
    entity_id: sensor.office_climate_temperature
    
  - platform: homeassistant
    id: reu_temp
    entity_id: sensor.reu_d1_temperature
  - platform: homeassistant
    id: seb_temp
    entity_id: sensor.seb_d1_temperature
  - platform: homeassistant
    id: bath_temp
    entity_id: sensor.bathroom_climate_temperature
  - platform: homeassistant
    id: ensuite_temp
    entity_id: sensor.ensuite_climate_temperature
  - platform: homeassistant
    id: lounge_temp
    entity_id: sensor.living_room_temp
    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - script.execute: all_data_received 

graph:
  - id: crypto_graph
    duration: 8h
    width: 960
    height: 510
    x_grid: 1h
    traces:
      - sensor: crypto_portfolio
        line_thickness: 5
    
display:
  - platform: lilygo_t5_47
    id: t5_display
    rotation: 180
    full_update_every: 5
    update_interval: never
    pages:
      - id: page_white
        # only_call this from refresh_display
        lambda: |-
          #define xres 960 
          #define yres 540
          it.filled_rectangle(0, 0, xres, yres, COLOR_OFF);
          it.print(xres/2, yres/2, id(font_name), COLOR_ON, TextAlign::CENTER, "Refreshing...");    
      - id: page_black
        # only call this from refresh_display
        lambda: |-
          #define xres 960 
          #define yres 540
          it.filled_rectangle(0, 0, xres, yres, COLOR_ON);
          it.print(xres/2, yres/2, id(font_name), COLOR_OFF, TextAlign::CENTER, "Refreshing...");     
      - id: page_sleep
        lambda: |-
          it.printf(10, 40, id(font_value), TextAlign::TOP_LEFT, "ZZZ zzz...");
          
      - id: page_crypto
        lambda: |-
          #define xres 960 
          #define yres 540
          #define x_pad 10 // border padding
          #define y_pad 10 // border padding      

          #define y1 0
          #define y2 285
          #define y3 425
          #define val_pad 60 // padding before value
          #define x1 x_pad // x position 1st column name
          #define x2 ((xres/3) * 1) // x position 2nd column name
          #define x3 ((xres/3) * 2) // x position 3rd column name

          id(t5_display).power_on();
          
          it.printf(x_pad, 40, id(font_value), TextAlign::TOP_LEFT, "Balance £%.2f", id(crypto_portfolio).state);
          std::string changeIcon = "\U000F0FE1";
          std::string change = "";
          if (id(crypto_change).state > 0) {
            changeIcon = "\U000F0CE1";
            change = "%.2f";
          } else if (id(crypto_change).state < 0) {
            changeIcon = "\U000F0047";
            change = "(%.2f)";
          }
          it.printf(60, 150, id(font_icons_small), TextAlign::CENTER_RIGHT, changeIcon.c_str());
          it.printf(60, 150, id(font_footer), TextAlign::CENTER_LEFT, change.c_str(), id(crypto_change).state);
           
          it.print(x1, y2, id(font_name), TextAlign::BASELINE_LEFT, "Bitcoin");
          it.print(x2, y2, id(font_name), TextAlign::BASELINE_LEFT, "Ethereum");
          it.print(x3, y2, id(font_name), TextAlign::BASELINE_LEFT, "Solana");
    
          it.printf(x1, y2+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F0813"); 
          it.printf(x1 + 65, y2+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "£%s", id(crypto_btc).state.c_str());
          it.printf(x2, y2+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F086A"); 
          it.printf(x2 + 65, y2+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "£%s", id(crypto_eth).state.c_str());
          it.printf(x3, y2+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F116B"); 
          it.printf(x3 + 65, y2+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "£%s", id(crypto_sol).state.c_str());      
    
          it.print(x1, y3, id(font_name), TextAlign::BASELINE_LEFT, "Litecoin");
          it.print(x2, y3, id(font_name), TextAlign::BASELINE_LEFT, "Doge");
          it.print(x3, y3, id(font_name), TextAlign::BASELINE_LEFT, "Stellar");
                
          it.printf(x1, y3+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F0A61"); 
          it.printf(x1 + 65, y3+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "£%s", id(crypto_ltc).state.c_str());    
          it.printf(x2, y3+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F0A43"); 
          it.printf(x2 + 65, y3+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "£%s", id(crypto_doge).state.c_str());
          it.printf(x3, y3+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F0178"); 
          it.printf(x3 + 65, y3+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "£%s", id(crypto_xlm).state.c_str());
          
          // Footer
          it.filled_rectangle(0, yres-30, xres, yres);
          it.strftime(x_pad, yres-y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_LEFT, "%A %d/%b/%Y", id(ntp).now());
          it.strftime(xres/2, yres-y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_CENTER, "Updated %H:%M", id(ntp).now());
  
          //it.printf(xres-x_pad, yres-y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_RIGHT, "%.2fV/%3d%%", id(battery).state, battery_percentage);
          bool charging = id(batt_volt).state >= 4.25;
          if (charging) {
            it.printf(xres-x_pad, yres-y_pad/2, id(font_icons_footer), COLOR_OFF, TextAlign::BASELINE_RIGHT, "\U000F140B"); // lightning-bolt
          } else {
            it.printf(xres-x_pad, yres-y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_RIGHT, "%.2fV/%.0f%%", id(batt_volt).state, id(batt).state);
          }

          if (id(shutting_down)) {
            it.print(xres-x_pad, y_pad, id(font_icons_smaller), TextAlign::TOP_RIGHT, "\U000F04B2"); // # sleep
          } else if (id(prevent_sleep).state) {
            it.print(xres-x_pad, y_pad, id(font_icons_smaller), TextAlign::TOP_RIGHT, "\U000F04B3"); // # sleep-off
          }

      - id: page_temps
        lambda: |-

          // Music - Now Playing
          if (strlen(id(music_title).state.c_str())>0) {
    
     
            it.printf(x_pad, y_pad+30, id(font_value), TextAlign::TOP_LEFT, id(music_title).state.c_str());
            it.printf(x_pad,y_pad+100, id(font_footer), TextAlign::TOP_LEFT, id(music_artist).state.c_str());          
          } else {
            // Calendar
            it.printf(x_pad, y_pad+30, id(font_value), TextAlign::TOP_LEFT, id(calendar_next_title).state.c_str());
            it.printf(x_pad,y_pad+100, id(font_footer), TextAlign::TOP_LEFT, id(calendar_next_start).state.c_str());  
          }
          
          //it.printf(xres-150, y1+135, id(font_name), TextAlign::TOP_CENTER, id(weather_day0_condition).state.c_str());
          
          // weather - wind
          it.printf(xres-275, y_pad+165, id(font_icons_smaller), COLOR_ON, TextAlign::CENTER_RIGHT, "\U000F059D");
          it.printf(xres-275, y_pad+165, id(font_footer), COLOR_ON, TextAlign::CENTER_LEFT, "%.1fkmh", id(weather_day0_windspeed).state);
    
          // weather - temp
          it.printf(xres-100, y_pad+165, id(font_icons_smaller), COLOR_ON, TextAlign::CENTER_RIGHT, "\U000F0510");
          it.printf(xres-100, y_pad+165, id(font_footer), COLOR_ON, TextAlign::CENTER_LEFT, "%.1f°C", id(weather_day0_temperature).state);

          // sunrise
          it.printf(xres-275, y_pad+210, id(font_icons_smaller), TextAlign::CENTER_RIGHT, "\U000F059C");
          it.printf(xres-275, y_pad+210, id(font_footer), TextAlign::CENTER_LEFT, "%s", id(sunrise).state.c_str());      
    
          // sunset
          it.printf(xres-100, y_pad+210, id(font_icons_smaller), TextAlign::CENTER_RIGHT, "\U000F059B");
          it.printf(xres-100, y_pad+210, id(font_footer), TextAlign::CENTER_LEFT, "%s", id(sunset).state.c_str());   
          
          // weather - icon
          if (id(weather_day0_condition).has_state()) {
            std::map<std::string, std::string> weather_map { 
              { "cloudy", "\U000F0590" },              
              { "exceptional", "\U000F0F2F" },          
              { "fog", "\U000F0591" },                 
              { "hail", "\U000F0592" },                
              { "lightning", "\U000F0593" },            
              { "lightning_rainy", "\U000F067E" },      
              { "clearnight", "\U000F0594" },         
              { "partlycloudy", "\U000F0595" },         
              { "pouring", "\U000F0596"},             
              { "rainy", "\U000F0597" },                
              { "snowy", "\U000F0598" },               
              { "snowyrainy", "\U000F067F" },           
              { "sunny", "\U000F0599" },                  
              { "windy", "\U000F059D" },               
              { "windyvariant", "\U000F059E" }         
            };   
            it.printf(xres-180, y1+80, id(weather_font), COLOR_ON, TextAlign::CENTER, weather_map[id(weather_day0_condition).state.c_str()].c_str());
          };
              
          it.print(x1, y2, id(font_name), TextAlign::BASELINE_LEFT, "Bedroom 1");
          it.print(x2, y2, id(font_name), TextAlign::BASELINE_LEFT, "Office");
          it.print(x3, y2, id(font_name), TextAlign::BASELINE_LEFT, "Seb's bedroom");
               
          it.printf(x1, y2+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F02E3"); 
          it.printf(x1 + 85, y2+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(bed1_temp).state);
          it.printf(x2, y2+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F1104"); 
          it.printf(x2 + 85, y2+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(bed2_temp).state);
          it.printf(x3, y2+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F02E3"); 
          it.printf(x3 + 85, y2+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(seb_temp).state);      
    
          it.print(x1, y3, id(font_name), TextAlign::BASELINE_LEFT, "Ensuite");
          it.print(x2, y3, id(font_name), TextAlign::BASELINE_LEFT, "Bathroom");
          it.print(x3, y3, id(font_name), TextAlign::BASELINE_LEFT, "Reu's bedroom");
               
          it.printf(x1, y3+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F09A1"); 
          it.printf(x1 + 85, y3+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(ensuite_temp).state);    
          it.printf(x2, y3+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F09A0"); 
          it.printf(x2 + 85, y3+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(bath_temp).state);
          it.printf(x3, y3+val_pad, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F02E3"); 
          it.printf(x3 + 85, y3+val_pad, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(reu_temp).state);
          
          // Footer
          it.filled_rectangle(0, yres-30, xres, yres);
          it.strftime(x_pad, yres-y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_LEFT, "%A %d/%b/%Y", id(ntp).now());
          it.strftime(xres/2, yres-y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_CENTER, "Updated %H:%M", id(ntp).now());

          bool charging = id(batt_volt).state >= 4.25;
          if (charging) {
            it.printf(xres-x_pad, yres-y_pad/2, id(font_icons_footer), COLOR_OFF, TextAlign::BASELINE_RIGHT, "\U000F140B"); // lightning-bolt
          } else {
            it.printf(xres-x_pad, yres-y_pad/2, id(font_footer), COLOR_OFF, TextAlign::BASELINE_RIGHT, "%.2fV/%.0f%%", id(batt_volt).state, id(batt).state);
          }

          if (id(shutting_down)) {
            it.print(xres-x_pad, y_pad, id(font_icons_smaller), TextAlign::TOP_RIGHT, "\U000F04B2"); // # sleep
          } else if (id(prevent_sleep).state) {
            it.print(xres-x_pad, y_pad, id(font_icons_smaller), TextAlign::TOP_RIGHT, "\U000F04B3"); // # sleep-off
          }
      - id: page_crypto_graph
        lambda: |-
          it.graph(0, 0, id(crypto_graph));         
          std::string changeIcon = "\U000F0FE1";
          std::string change = "";
          if (id(crypto_change).state > 0) {
            changeIcon = "\U000F0CE1";
            change = "%.2f";
          } else if (id(crypto_change).state < 0) {
            changeIcon = "\U000F0047";
            change = "(%.2f)";
          }
          it.printf(x_pad+50, 40, id(font_icons_small), TextAlign::CENTER_RIGHT, changeIcon.c_str());
          it.printf(x_pad+50, 40, id(font_footer), TextAlign::CENTER_LEFT, change.c_str(), id(crypto_change).state); 
          
          // Footer
          //it.line(0, yres-30, xres, yres-30);
          it.strftime(x_pad, yres-y_pad/2, id(font_footer), COLOR_ON, TextAlign::BASELINE_LEFT, "%A %d/%b/%Y", id(ntp).now());
          it.strftime(xres/2, yres-y_pad/2, id(font_footer), COLOR_ON, TextAlign::BASELINE_CENTER, "Updated %H:%M", id(ntp).now());
          //it.printf(xres-x_pad, yres-y_pad/2, id(font_footer), COLOR_ON, TextAlign::BASELINE_RIGHT, "%.2fV/%.0f%%", id(batt_volt).voltage->state, id(batt).state);
      - id: page_time_quote
        lambda: |-
          it.printf(xres/2, y_pad, id(font_value), COLOR_ON, TextAlign::TOP_CENTER, id(quote_time).state.c_str());
          it.printf(x_pad, 50, id(font_value), COLOR_ON, TextAlign::TOP_LEFT, id(quote_text).state.c_str());
          it.printf(x_pad, yres-y_pad/2, id(font_footer), COLOR_ON, TextAlign::BASELINE_LEFT,  id(quote_title).state.c_str());
          it.printf(xres-x_pad, yres-y_pad/2, id(font_footer), COLOR_ON, TextAlign::BASELINE_RIGHT, id(quote_author).state.c_str());
deep_sleep:
  run_duration: ${run_time} 
  sleep_duration: ${sleep_time}
  id: deep_sleep_1        
