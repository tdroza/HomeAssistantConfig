substitutions:
  device_name: "epaper-t5"
  friendly_name: "ePaper T5"
esphome:
  name: "${device_name}"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Epaper T5 Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

time:
  - platform: homeassistant
    id: ntp

external_components:
  - source:
      type: git
      url: https://github.com/vbaksa/esphome
      ref: dev
    components:
      - lilygo_t5_47_battery 
      - lilygo_t5_47_display
  
font:
  - file: "fonts/OpenSans-Bold.ttf"
    id: font_name
    size: 38
    glyphs: |-
      !"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "fonts/OpenSans-Medium.ttf"
    id: font_value
    size: 56    
    glyphs: |-
      !"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "fonts/OpenSans-Medium.ttf"
    id: font_footer
    size: 28    
    glyphs: |-
      !"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font
    size: 160
    glyphs: [
      "\U000F0590",
      "\U000F0F2F",
      "\U000F0591",
      "\U000F0592",
      "\U000F0593",
      "\U000F067E",
      "\U000F0594",
      "\U000F0595",
      "\U000F0596",
      "\U000F0597",
      "\U000F0598",
      "\U000F067F",
      "\U000F0599",
      "\U000F059D",
      "\U000F059E"
    ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons_small
    size: 56
    glyphs:
      - "\U000F02E3" # Bed
      - "\U000F09A1" # Shower
      - "\U000F09A0" # Bath
      - "\U000F1104" # Monitor
      - "\U000F0510" # temp
      - "\U000F059D" # wind

script:
  - id: all_data_received
    then:
      - component.update: t5_display

text_sensor:
  - platform: homeassistant
    id: weather_day0_condition
    entity_id: sensor.weather_condition
    internal: true
    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - script.execute: all_data_received  
  - platform: homeassistant
    id: calendar_next_title
    entity_id: sensor.calendar_family_next_title
    internal: true
  - platform: homeassistant
    id: calendar_next_start
    entity_id: sensor.calendar_family_next_start
    internal: true
    
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      icon: mdi:wifi
      entity_category: diagnostic
    ssid:
      name: "${friendly_name} Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
  
sensor:
  - platform: adc
    pin: GPIO36
    name: "${friendly_name} Battery Voltage"
    id: batt_volt
    attenuation: auto
    update_interval: never
    filters:
      - multiply: 2
    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - script.execute: all_data_received 
        
  - platform: template
    name: "${friendly_name} Battery"
    id: batt
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    lambda: |-
      int y = (1-(4.1-id(batt_volt).state)/(4.1-3.3))*100;
      if (y < 100) {return y;} else {return 100;};
    update_interval: never
    
  - platform: homeassistant
    id: weather_day0_temperature
    entity_id: sensor.weather_temperature
    internal: true
  - platform: homeassistant
    id: weather_day0_windspeed
    entity_id: sensor.weather_windspeed
    internal: true
  - platform: homeassistant
    id: bed1_temp
    entity_id: sensor.bed1_temperature
    internal: true    
  - platform: homeassistant
    id: bed2_temp
    entity_id: sensor.office_temperature
    internal: true    
  - platform: homeassistant
    id: reu_temp
    entity_id: sensor.reu_d1_temperature
    internal: true
  - platform: homeassistant
    id: seb_temp
    entity_id: sensor.seb_d1_temperature
    internal: true
  - platform: homeassistant
    id: bath_temp
    entity_id: sensor.bathroom_temperature
    internal: true
  - platform: homeassistant
    id: ensuite_temp
    entity_id: sensor.ensuite_temperature
    internal: true
  - platform: homeassistant
    id: lounge_temp
    entity_id: sensor.living_room_temp
    internal: true
    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - script.execute: all_data_received 

graph:
  # Show bare-minimum auto-ranged graph
  - id: bed1_graph
    sensor: bed1_temp
    duration: 1h
    width: 150
    height: 50
    
display:
  - platform: lilygo_t5_47_display
    id: t5_display
    rotation: 180
    update_interval: 60s
    lambda: |-
      #define xres 960 
      #define yres 540
      #define x_pad 10 // border padding
      #define y_pad 10 // border padding      
      
      int y1 = 0;
      int y2 = 250;
      int y3 = 400;
      #define val_pad 70 // padding before value
      #define x1n 20 //x position 1st column name
      #define x1v 25 //x position 1st column value
      #define x1i 50 //x position 1st column icon
      #define x2n ((xres/3) * 1) //x position 2nd column name
      #define x2v ((xres/3) * 1) //x position 2nd column value
      #define x2i ((xres/3) * 1) //x position 2nd column icon
      #define x3n ((xres/3) * 2) //x position 3rd column name
      #define x3v ((xres/3) * 2) //x position 3rd column value
      #define x3i ((xres/3) * 2) //x position 3rd column icon

      // Calendar
      it.printf(x_pad, y_pad+35, id(font_value), TextAlign::TOP_LEFT, id(calendar_next_title).state.c_str());
      it.printf(x_pad,y_pad+100, id(font_footer), TextAlign::TOP_LEFT, id(calendar_next_start).state.c_str());
      
      //it.printf(xres-150, y1+135, id(font_name), TextAlign::TOP_CENTER, id(weather_day0_condition).state.c_str());
      
      // weather - temp
      it.printf(xres-275, y_pad+160, id(font_icons_small), COLOR_ON, TextAlign::CENTER_RIGHT, "\U000F0510");
      it.printf(xres-275, y_pad+160, id(font_footer), COLOR_ON, TextAlign::CENTER_LEFT, "%.1f°C", id(weather_day0_temperature).state);
      
      // weather - wind
      it.printf(xres-115, y_pad+160, id(font_icons_small), COLOR_ON, TextAlign::CENTER_RIGHT, "\U000F059D");
      it.printf(xres-115, y_pad+160, id(font_footer), COLOR_ON, TextAlign::CENTER_LEFT, "%.1fkmh", id(weather_day0_windspeed).state);

      // weather - icon
      if (id(weather_day0_condition).has_state()) {
        std::map<std::string, std::string> weather_map { 
          { "cloudy", "\U000F0590" },              
          { "exceptional", "\U000F0F2F" },          
          { "fog", "\U000F0591" },                 
          { "hail", "\U000F0592" },                
          { "lightning", "\U000F0593" },            
          { "lightning_rainy", "\U000F067E" },      
          { "clearnight", "\U000F0594" },         
          { "partlycloudy", "\U000F0595" },         
          { "pouring", "\U000F0596"},             
          { "rainy", "\U000F0597" },                
          { "snowy", "\U000F0598" },               
          { "snowyrainy", "\U000F067F" },           
          { "sunny", "\U000F0599" },                  
          { "windy", "\U000F059D" },               
          { "windyvariant", "\U000F059E" }         
        };   
        it.printf(xres-180, y1+80, id(weather_font), COLOR_ON, TextAlign::CENTER, weather_map[id(weather_day0_condition).state.c_str()].c_str());
      };
          
      it.print(x1n, y2, id(font_name), TextAlign::BASELINE_LEFT, "Bedroom 1");
      it.print(x2n, y2, id(font_name), TextAlign::BASELINE_LEFT, "Office");
      it.print(x3n, y2, id(font_name), TextAlign::BASELINE_LEFT, "Seb's bedroom");
      y2+= val_pad;      
      it.printf(x1n, y2, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F02E3"); 
      it.printf(x1v + 60, y2, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(bed1_temp).state);
      it.graph(x1v + 60, y2, id(bed1_graph));
      it.printf(x2n, y2, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F1104"); 
      it.printf(x2v + 60, y2, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(bed2_temp).state);
      it.printf(x3n, y2, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F02E3"); 
      it.printf(x3v + 60, y2, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(seb_temp).state);      



      it.print(x1n, y3, id(font_name), TextAlign::BASELINE_LEFT, "Ensuite");
      it.print(x2n, y3, id(font_name), TextAlign::BASELINE_LEFT, "Bathroom");
      it.print(x3n, y3, id(font_name), TextAlign::BASELINE_LEFT, "Reu's bedroom");
      y3+= val_pad;      
      it.printf(x1n, y3, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F09A1"); 
      it.printf(x1v + 60, y3, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(ensuite_temp).state);    
      it.printf(x2n, y3, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F09A0"); 
      it.printf(x2v + 60, y3, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(bath_temp).state);
      it.printf(x3n, y3, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F02E3"); 
      it.printf(x3v + 60, y3, id(font_value), TextAlign::BASELINE_LEFT, "%.1f °C", id(reu_temp).state);
      
      // Footer
      it.strftime(x_pad, yres-y_pad/2, id(font_footer), TextAlign::BASELINE_LEFT, "%A %d/%b/%Y", id(ntp).now());
      it.strftime(xres/2, yres-y_pad/2, id(font_footer), TextAlign::BASELINE_CENTER, "Updated %H:%M", id(ntp).now());
      it.printf(xres-x_pad, yres-y_pad/2, id(font_footer), TextAlign::BASELINE_RIGHT, "%.2fV/%.0f%%", id(batt_volt).state*2, id(batt).state);
