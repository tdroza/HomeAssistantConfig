
wifi:
  networks:
    - ssid: !secret wifi_iot_ssid
      password: !secret wifi_password
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
  domain: ".lan"
  manual_ip:
    static_ip: 192.168.1.82
    gateway: 192.168.1.254
    subnet: 255.255.255.0
  
  ap:
    ssid: ${devicename}

# Enable the captive portal for inital WiFi setup
captive_portal:

substitutions:
  devicename: tagreader_hwspi
  friendly_name: TagReader_hwspi

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  
  
# If buzzer is enabled, notify on api connection success
  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    - rtttl.play: "success:d=24,o=5,b=100:c,g,b"

# Define switches to control LED and buzzer from HA
switch:
- platform: template
  name: "${friendly_name} Buzzer Enabled"
  id: buzzer_enabled
  icon: mdi:volume-high
  optimistic: true
  restore_state: yes
  turn_on_action:
    - rtttl.play: "beep:d=16,o=5,b=100:b"
- platform: template
  name: "${friendly_name} LED enabled"
  id: led_enabled
  icon: mdi:alarm-light-outline
  optimistic: true
  restore_state: yes

# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
  - service: rfidreader_tag_ok
    then:
    - rtttl.play: "beep:d=16,o=5,b=100:b"

  - service: rfidreader_tag_ko
    then:
    - rtttl.play: "beep:d=8,o=5,b=100:b"

  - service: play_rtttl
    variables:
      song_str: string
    then:
    - rtttl.play: !lambda 'return song_str;'

# Enable OTA upgrade
ota:

# Enable SPI interface
spi:
  clk_pin: D5
  miso_pin: D6
  mosi_pin: D7

# Configure the PN532 module
pn532:
  cs_pin: D3
  update_interval: 2s

  # What happens when a tag is read
  on_tag:
    then:
    - homeassistant.tag_scanned: !lambda 'return x;'
    - if:
        condition:
          switch.is_on: buzzer_enabled
        then:
        - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
    - if:
        condition:
          switch.is_on: led_enabled
        then:
        - light.turn_on:
            id: activity_led
            brightness: 100%
            red: 0%
            green: 100%
            blue: 0%
            flash_length: 500ms

# Define the buzzer output
output:
- platform: esp8266_pwm
  pin: D8
  id: buzzer

# Define buzzer as output for RTTTL
rtttl:
  output: buzzer

# Configure LED
light:
- platform: fastled_clockless
  chipset: WS2812
  pin: D1
  default_transition_length: 10ms
  num_leds: 1
  rgb_order: GRB
  id: activity_led
  name: "${friendly_name} LED"
  restore_mode: ALWAYS_OFF