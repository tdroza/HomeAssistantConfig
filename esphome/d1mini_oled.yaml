esphome:
  name: d1mini_oled
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: ".lan"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "D1Mini Oled Hotspot"
    password: !secret wifi_password

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:    

captive_portal:

time:
  - platform: homeassistant
    id: esptime

sensor:
  - platform: homeassistant
    id: bed1_temp
    entity_id: sensor.bed1_temperature
    internal: true

  - platform: homeassistant
    id: reu_temp
    entity_id: sensor.reu_temperature
    internal: true

  - platform: homeassistant
    id: seb_temp
    entity_id: sensor.seb_temperature
    internal: true    

  - platform: homeassistant
    id: bath_temp
    entity_id: sensor.bathroom_temperature
    internal: true    

  - platform: homeassistant
    id: printer_status
    entity_id: sensor.printer_current_state
    internal: true

  - platform: homeassistant
    id: printer_percent
    entity_id: sensor.printer_job_percentage
    internal: true
    
  - platform: homeassistant
    id: printer_elapsed
    entity_id: sensor.printer_time_elapsed
    internal: true
    
  - platform: homeassistant
    id: printer_remain
    entity_id: sensor.printer_time_remaining
    internal: true
    
font:
  - file: 'fonts/calibri.ttf'
    id: calibri
    size: 10
i2c:
  sda: D3
  scl: D4
  scan: True

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x32"
    reset_pin: D0
    address: 0x3C
    id: oled
    pages:
      - id: page_temps
        lambda: |-
          // Page 1 - Temperatures
          it.printf(64, 0, id(calibri), TextAlign::TOP_CENTER, "Temperature"); // title
          it.strftime(125, 0, id(calibri), TextAlign::TOP_RIGHT, "%H:%M", id(esptime).now()); // time
    
          it.printf(15, 12, id(calibri), TextAlign::TOP_LEFT , "Bed1:");
          if (id(bed1_temp).has_state()) {
            it.printf(40, 12, id(calibri), TextAlign::TOP_LEFT , "%.1f째", id(bed1_temp).state);
          }
    
          it.printf(70, 12, id(calibri), TextAlign::TOP_LEFT , "Bath:");
          if (id(seb_temp).has_state()) {
            it.printf(95, 12, id(calibri), TextAlign::TOP_LEFT , "%.1f째", id(bath_temp).state);
          }
          
          it.printf(15, 22, id(calibri), TextAlign::TOP_LEFT , "Seb:");
          if (id(reu_temp).has_state()) {
            it.printf(40, 22, id(calibri), TextAlign::TOP_LEFT , "%.1f째", id(seb_temp).state);
          }
          
          it.printf(70, 22, id(calibri), TextAlign::TOP_LEFT , "Reu:");
          if (id(reu_temp).has_state()) {
            it.printf(95, 22, id(calibri), TextAlign::TOP_LEFT , "%.1f째", id(reu_temp).state);
          }      
      - id: page_printer
        lambda: |-
          // Page 2 - Printer
          it.printf(64, 0, id(calibri), TextAlign::TOP_CENTER, "3D Printer"); // title
          it.strftime(125, 0, id(calibri), TextAlign::TOP_RIGHT, "%H:%M", id(esptime).now()); // time
          
          
          it.printf(5, 12, id(calibri), TextAlign::TOP_LEFT , "Status:");
          if (id(printer_status).has_state()) {
            it.printf(40, 12, id(calibri), TextAlign::TOP_LEFT , "%s", id(printer_status).state);
          }
    
          it.printf(60, 12, id(calibri), TextAlign::TOP_LEFT , "Progress:");
          if (id(printer_percent).has_state()) {
            it.printf(105, 12, id(calibri), TextAlign::TOP_LEFT , "%.1f%%", id(printer_percent).state);
          }
          
          it.printf(5, 22, id(calibri), TextAlign::TOP_LEFT , "Elapsed:");
          if (id(printer_elapsed).has_state()) {
            it.printf(40, 22, id(calibri), TextAlign::TOP_LEFT , "%.1f", id(printer_elapsed).state ? id(printer_elapsed).state : 0);
          }
    
          it.printf(60, 22, id(calibri), TextAlign::TOP_LEFT , "Remaining:");
          if (id(printer_remain).has_state()) {
            it.printf(105, 22, id(calibri), TextAlign::TOP_LEFT , "%.1f", id(printer_remain).state ? id(printer_remain).state : 0);
          }
          
interval:
  - interval: 10s
    then:
      - display.page.show_next: oled
      - component.update: oled