esphome:
  name: esp32_epaper
  platform: ESP32
  board: esp32dev
  on_boot:
    priority: -100.0
    then: 
      - if:
          condition:
            lambda: 'return id(next_page)==0;'
          then:
            - display.page.show: page_image
      - if:
          condition:
            lambda: 'return id(next_page)==1;'
          then:
            - display.page.show: page_temps
      - if:
          condition:
            lambda: 'return id(next_page)==2;'
          then:
            - display.page.show: page_humidity
      - if:
          condition:
            lambda: 'return id(next_page)==3;'
          then:
            - display.page.show: page_weather
            - lambda: 'id(next_page) = -1;'
      - lambda: 'id(next_page)++;'
      - component.update: epaper 
      - delay: 5s
      - component.update: epaper  

wifi:
  ssid: !secret wifi_iot_ssid
  password: !secret wifi_password
  domain: ".lan"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32 Epaper Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

spi:
  clk_pin: 18
  mosi_pin: 23

globals:
  - id: next_page
    restore_value: yes
    initial_value: "0"
    type: int
    
font:
  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_s
    size: 18
  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_m
    size: 20
  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_l
    glyphs: '!/"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'''
    size: 28
  - file: 'fonts/Roboto-Bold.ttf'
    id: roboto_bold_xs
    size: 16

time:
  - platform: homeassistant
    id: esptime
    
text_sensor:
  - platform: homeassistant
    id: weather_day0_condition
    entity_id: sensor.weather_condition
    internal: true
    
binary_sensor:
  - platform: homeassistant
    id: garage_door
    entity_id: binary_sensor.garage_door
    internal: true    
  - platform: gpio
    pin: GPIO39
    name: "ePaper Prev Page"
    on_press:
      then:
        - display.page.show_previous: epaper
        - component.update: epaper     
sensor:
  - platform: homeassistant
    id: bed1_temp
    entity_id: sensor.bed1_temperature
    internal: true    
  - platform: homeassistant
    id: reu_temp
    entity_id: sensor.reu_temperature
    internal: true
  - platform: homeassistant
    id: seb_temp
    entity_id: sensor.seb_temperature
    internal: true
  - platform: homeassistant
    id: bath_temp
    entity_id: sensor.bathroom_temperature
    internal: true
  - platform: homeassistant
    id: ensuite_temp
    entity_id: sensor.ensuite_temperature
    internal: true
  - platform: homeassistant
    id: lounge_temp
    entity_id: sensor.living_room_temp
    internal: true
  - platform: homeassistant
    id: bed1_humidity
    entity_id: sensor.bed1_humidity
    internal: true
  - platform: homeassistant
    id: reu_humidity
    entity_id: sensor.reu_humidity
    internal: true
  - platform: homeassistant
    id: seb_humidity
    entity_id: sensor.seb_humidity
    internal: true
  - platform: homeassistant
    id: bath_humidity
    entity_id: sensor.bathroom_humidity
    internal: true
  - platform: homeassistant
    id: ensuite_humidity
    entity_id: sensor.ensuite_humidity
    internal: true
  - platform: homeassistant
    id: lounge_humidity
    entity_id: sensor.living_room_humidity
    internal: true
  - platform: homeassistant
    id: weather_day0_temperature
    entity_id: sensor.weather_temperature
    internal: true
  - platform: homeassistant
    id: weather_day0_humidity
    entity_id: sensor.weather_humidity
    internal: true
  - platform: homeassistant
    id: weather_day0_windspeed
    entity_id: sensor.weather_windspeed
    internal: true
    
image:
  - file: "images/tom.png"
    id: tom
    resize: 100x100
  - file: "images/thermometer-lines.png"
    id: thermometer
    resize: 24x24    
  - file: "images/water-percent.png"
    id: humidity
    resize: 24x24      
  - file: "images/thermometer-lines_50_inverse.png"
    id: thermometer_35_inverse
    resize: 35x35  
  - file: "images/water-percent_50_inverse.png"
    id: humidity_35_inverse
    resize: 35x35  
  - file: "images/weather-windy_50_inverse.png"
    id: wind_35_inverse
    resize: 35x35    

  - file: "images/weather/weather-cloudy_100.png"
    id: cloudy
  - file: "images/weather/weather-exceptional_100.png"
    id: exceptional
  - file: "images/weather/weather-fog_100.png"
    id: fog
  - file: "images/weather/weather-hail_100.png"
    id: hail
  - file: "images/weather/weather-lightning_100.png"
    id: lightning
  - file: "images/weather/weather-lightning-rainy_100.png"
    id: lightning_rainy
  - file: "images/weather/weather-night_100.png"
    id: clearnight
  - file: "images/weather/weather-partly-cloudy_100.png"
    id: partlycloudy
  - file: "images/weather/weather-pouring_100.png"
    id: pouring
  - file: "images/weather/weather-rainy_100.png"
    id: rainy
  - file: "images/weather/weather-snowy_100.png"
    id: snowy
  - file: "images/weather/weather-snowy-rainy_100.png"
    id: snowyrainy
  - file: "images/weather/weather-sunny_100.png"
    id: sunny
  - file: "images/weather/weather-windy_100.png"
    id: windy
  - file: "images/weather/weather-windy-variant_100.png"
    id: windyvariant

    
display:
  - platform: waveshare_epaper
    cs_pin: 5
    dc_pin: 17
    busy_pin: 4
    reset_pin: 16
    model: 2.13in-ttgo-b73
    rotation: 270°
    full_update_every: 10
    update_interval: 15s
    id: epaper

    pages:
      - id: page_image
        lambda: |-
          it.image(5, 20, id(tom));
          it.print(125, 66, id(roboto_l), TextAlign::CENTER, "Tom D'Roza");
          
          it.filled_rectangle(0, 105, 250, 122);
          it.strftime(250, 125, id(roboto_bold_xs), COLOR_OFF, TextAlign::BOTTOM_RIGHT , "Updated: %H:%M", id(esptime).now());
      - id: page_temps
        lambda: |-
          it.printf(0, 0, id(roboto_m), TextAlign::TOP_LEFT, "Bed1:");
          it.printf(115, 0, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", (id(bed1_temp).has_state()?id(bed1_temp).state:0.0));
          it.printf(125, 0, id(roboto_m), TextAlign::TOP_LEFT, "Ensuite:");
          it.printf(249, 0, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(ensuite_temp).has_state()?id(ensuite_temp).state:0.0);
          it.printf(0, 25, id(roboto_m), TextAlign::TOP_LEFT, "Bed3:");
          it.printf(115, 25, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(seb_temp).has_state()?id(seb_temp).state:0.0);
          it.printf(125, 25, id(roboto_m), TextAlign::TOP_LEFT, "Bed4:");
          it.printf(249, 25, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(reu_temp).has_state()?id(reu_temp).state:0.0);
          it.printf(0, 50, id(roboto_m), TextAlign::TOP_LEFT, "Bath:");
          it.printf(115, 50, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(bath_temp).has_state()?id(bath_temp).state:0.0);
          it.printf(125, 50, id(roboto_m), TextAlign::TOP_LEFT, "Lounge:");
          it.printf(249, 50, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f°", id(lounge_temp).has_state()?id(lounge_temp).state:0.0);
          it.printf(0, 75, id(roboto_m), TextAlign::TOP_LEFT, "Garage: %s", id(garage_door).state?"Open":"Closed");
          it.image(220, 75, id(thermometer));
          
          it.filled_rectangle(0, 105, 250, 122);
          it.strftime(250, 125, id(roboto_bold_xs), COLOR_OFF, TextAlign::BOTTOM_RIGHT , "Updated: %H:%M", id(esptime).now());
      - id: page_humidity
        lambda: |-
          it.printf(0, 0, id(roboto_m), TextAlign::TOP_LEFT , "Bed1:");
          it.printf(115, 0, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", (id(bed1_humidity).has_state()?id(bed1_humidity).state:0.0));
          it.printf(125, 0, id(roboto_m), TextAlign::TOP_LEFT, "Ensuite:");
          it.printf(249, 0, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", id(ensuite_humidity).has_state()?id(ensuite_humidity).state:0.0);
          it.printf(0, 25, id(roboto_m), TextAlign::TOP_LEFT, "Bed3:");
          it.printf(115, 25, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", id(seb_humidity).has_state()?id(seb_humidity).state:0.0);
          it.printf(125, 25, id(roboto_m), TextAlign::TOP_LEFT, "Bed4:");
          it.printf(249, 25, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", id(reu_humidity).has_state()?id(reu_humidity).state:0.0);
          it.printf(0, 50, id(roboto_m), TextAlign::TOP_LEFT, "Bath:");
          it.printf(115, 50, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", id(bath_humidity).has_state()?id(bath_humidity).state:0.0);
          it.printf(125, 50, id(roboto_m), TextAlign::TOP_LEFT, "Lounge:");
          it.printf(249, 50, id(roboto_m), TextAlign::TOP_RIGHT, "%.1f%%", id(lounge_humidity).has_state()?id(lounge_humidity).state:0.0);
          it.printf(0, 75, id(roboto_m), TextAlign::TOP_LEFT, "Garage: %s", id(garage_door).state?"Open":"Closed");
          it.image(220, 75, id(humidity));
          
          it.filled_rectangle(0, 105, 250, 122);
          it.strftime(250, 125, id(roboto_bold_xs), COLOR_OFF, TextAlign::BOTTOM_RIGHT , "Updated: %H:%M", id(esptime).now());

      - id: page_weather
        lambda: |-
          it.filled_rectangle(0, 0, 125, 122);
          it.image(0, 5, id(thermometer_35_inverse));
          it.printf(36, 43, id(roboto_l), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%.1f", id(weather_day0_temperature).has_state()?id(weather_day0_temperature).state:0.0);
          it.printf(123, 40, id(roboto_s), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "°C");
          it.image(0, 41, id(humidity_35_inverse));
          it.printf(36, 78, id(roboto_l), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%.1f", id(weather_day0_humidity).has_state()?id(weather_day0_humidity).state:0.0);
          it.printf(123, 75, id(roboto_s), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "%%");
          it.image(0, 76, id(wind_35_inverse));
          it.printf(36, 113, id(roboto_l), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%.1f", id(weather_day0_windspeed).has_state()?id(weather_day0_windspeed).state:0.0);
          it.printf(123, 110, id(roboto_s), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "kmh");
        
          if (strcmp("cloudy", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(cloudy));
          if (strcmp("exceptional", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(exceptional));
          if (strcmp("fog", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(fog));
          if (strcmp("hail", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(hail));
          if (strcmp("lightning", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(lightning));
          if (strcmp("lightning_rainy", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(lightning_rainy));
          if (strcmp("clearnight", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(clearnight));
          if (strcmp("partlycloudy", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(partlycloudy));
          if (strcmp("pouring", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(pouring));
          if (strcmp("rainy", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(rainy));
          if (strcmp("snowy", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(snowy));
          if (strcmp("snowyrainy", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(snowyrainy));
          if (strcmp("sunny", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(sunny));
          if (strcmp("windy", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(windy));
          if (strcmp("windyvariant", id(weather_day0_condition).state.c_str())==0) it.image(137, 15, id(windyvariant));
                    
          char* weather_state = strdup(id(weather_day0_condition).state.c_str());
          weather_state[0] = toupper(weather_state[0]);
          it.printf(190, 5, id(roboto_m), TextAlign::TOP_CENTER, "%s",  weather_state);
          
          it.strftime(250, 125, id(roboto_bold_xs), COLOR_ON, TextAlign::BOTTOM_RIGHT , "Updated: %H:%M", id(esptime).now());
          
deep_sleep:
  run_duration: 45s
  sleep_duration: 5min
  
#interval:
#  - interval: 60s
#    then:
#      - display.page.show_next: epaper
#      - component.update: epaper        

