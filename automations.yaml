- id: '1575922124106'
  alias: Close the blinds as dusk
  description: ''
  trigger:
  - event: sunset
    offset: +00:30:00
    platform: sun
  condition: []
  action:
  - alias: ''
    data:
      entity_id: all
    service: cover.close_cover
- id: '1575923914112'
  alias: ifttt_webhook
  trigger:
  - event_data:
      action: call_service
    event_type: ifttt_webhook_received
    platform: event
  action:
  - data:
      entity_id: '{{ trigger.event.data.entity_id }}'
    service_template: '{{ trigger.event.data.service }}'
- id: '1576537003318'
  alias: ifttt_webhook_params
  trigger:
  - platform: event
    event_data:
      action: call_service_with_params
    event_type: ifttt_webhook_received
  action:
  - service_template: '{{ trigger.event.data.service }}'
    data:
      brightness: '{{ trigger.event.data.brightness }}'
      effect: '{{ trigger.event.data.effect }}'
      entity_id: '{{ trigger.event.data.entity_id }}'
- id: '1580936086819'
  alias: ifttt kodi rpc
  description: ''
  trigger:
  - platform: event
    event_data:
      action: kodi_rpc_service
    event_type: ifttt_webhook_received
  condition: []
  action:
  - service_template: '{{ trigger.event.data.service }}'
    data:
      method: '{{ trigger.event.data.method }}'
- id: '1576675828079'
  alias: Presence - Nobody home
  description: ''
  trigger:
  - entity_id: group.all_persons
    from: home
    platform: state
    to: not_home
  condition: []
  action:
  - data:
      message: Nobody is home right now
    service: notify.telegram_td
- id: '1576676147603'
  alias: 'Lights on: Nobody home and lights on'
  description: ''
  trigger:
  - entity_id: group.all_persons
    for: 00:02:00
    from: home
    platform: state
    to: not_home
  condition:
  - condition: state
    entity_id: group.all_my_lights
    state: 'on'
  action:
  - service: telegram_bot.send_message
    data:
      inline_keyboard:
      - Turn off:/off
      target:
      - '{{ states(''input_text.telegram_td'') }}'
      - '{{ states(''input_text.telegram_ad'') }}'
      message: ðŸ’¡ Nobody is home but lights have been left on
  - alias: ''
    data: {}
    entity_id: automation.lights_on_repeat_notification
    service: automation.turn_on
- id: '1576771228052'
  alias: 'Lights on: repeat notification'
  description: This automation is turned on by the "nobody home" automation and fires
    every 15 mins.
  trigger:
  - minutes: /15
    platform: time_pattern
  condition: []
  action:
  - service: telegram_bot.send_message
    data:
      inline_keyboard:
      - Turn off:/off
      target:
      - '{{ states(''input_text.telegram_td'') }}'
      - '{{ states(''input_text.telegram_ad'') }}'
      message: Nobody is home but lights have been left on . I'll remind you every
        15 minutes.
  initial_state: false
- id: '1576772552665'
  alias: 'Lights on: disable repeat notification'
  description: ''
  trigger:
  - entity_id: group.all_my_lights
    from: 'on'
    platform: state
    to: 'off'
  - entity_id: switch.christmas_star
    from: 'on'
    platform: state
    to: 'off'
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: automation.lights_on_repeat_notification
      state: 'on'
    - condition: state
      entity_id: group.all_my_lights
      state: 'off'
  action:
  - data:
      entity_id: automation.lights_on_repeat_notification
    service: automation.turn_off
- id: '1576773012546'
  alias: Presence - Somebody arrived home
  description: ''
  trigger:
  - entity_id: group.all_persons
    from: not_home
    platform: state
    to: home
  condition: []
  action:
  - data:
      message: "{%- for person in states.group.all_persons.attributes.entity_id -%}\n\
        \  {%- if is_state(person, 'home') -%} \n    {{ state_attr(person, 'friendly_name')\
        \ }} just arrived home\n  {%- endif -%}\n{%- endfor -%} \n"
    service: notify.telegram_td
  mode: single
- id: '1576773914306'
  alias: Telegram /off
  description: Respond to a manually typed Telegram message of "/off" (using telegram_command)
    or a "/off"  message from the inline_keyboard notification button (using telegram_callback)
  trigger:
  - event_data:
      command: /off
    event_type: telegram_callback
    platform: event
  - event_data:
      command: /off
    event_type: telegram_command
    platform: event
  condition: []
  action:
  - data:
      entity_id: all
    service: light.turn_off
  - data:
      entity_id: switch.sonoff_10001f5fa0
    service: switch.turn_off
  - data:
      entity_id: switch.christmas_star
    service: switch.turn_off
  - service: telegram_bot.send_message
    data:
      target:
      - '{{ states(''input_text.telegram_td'') }}'
      - '{{ states(''input_text.telegram_ad'') }}'
      message: All lights turned off.
- id: '1577980276286'
  alias: Presence - Left work (Tom)
  description: Send a telegram notification when Tom has been away from work for 2
    minutes
  trigger:
  - entity_id: person.tom
    for: 00:02:00
    from: BJSS
    platform: state
    to: not_home
  condition:
  - condition: template
    value_template: '{{ not is_state(''sensor.oneplus5t_wifi_connection'', ''BJSS-Staff'')
      }}'
  - after: '16:30'
    condition: time
  action:
  - data:
      message: Tom left work 2 minutes ago
    service: notify.telegram_td
- id: '1578494385278'
  alias: Presence - Left work (Anna)
  description: Send a Telegram notification when Anna been away from work for 2 minutes
  trigger:
  - entity_id: person.anna
    for: 00:02:00
    from: AD Work
    platform: state
    to: not_home
  condition: []
  action:
  - data:
      message: Anna left work 2 minutes ago.
    service: notify.telegram_td
- id: '1578592845893'
  alias: 'Presence: Left Leeds (Tom)'
  description: Send a Telegram notification when Tom been away from work for 2 minutes
  trigger:
  - entity_id: person.tom
    for: 00:02:00
    from: Leeds Station
    platform: state
    to: not_home
  condition:
  - after: '16:30'
    condition: time
  action:
  - service: telegram_bot.send_message
    data:
      target:
      - '{{ states(''input_text.telegram_td'') }}'
      - '{{ states(''input_text.telegram_ad'') }}'
      message: Tom left Leeds Station 2 minutes ago
- id: '1580903225785'
  alias: 'Presence: Greeting'
  description: Play a greeting when Tom arrives home
  trigger:
  - entity_id: person.tom
    from: not_home
    platform: state
    to: home
  condition: []
  action:
  - delay: 00:00:30
  - data:
      message: Hello Tom, {{ states('sensor.compliment') }}
    entity_id: media_player.hallway_home
    service: tts.google_translate_say
- id: '1580921419430'
  alias: 'Trains: Update Next LDS-SHY train'
  description: Between the hours of 16:00 and 18:00 update the LDS-SHY train sensor
    every 15 minutes
  trigger:
  - hours: '16'
    minutes: /2
    platform: time_pattern
  - hours: '17'
    minutes: /15
    platform: time_pattern
  condition: []
  action:
  - entity_id: sensor.next_train_to_shy
    service: homeassistant.update_entity
- id: '1580923110072'
  alias: 'Trains: Update Next SHY-LDS train'
  description: Between the hours of 07:00 and 09:00 update the SHY-LDS train sensor
  trigger:
  - hours: '07'
    minutes: /2
    platform: time_pattern
  - hours: 08
    minutes: /15
    platform: time_pattern
  condition: []
  action:
  - entity_id: sensor.next_train_to_lds
    service: homeassistant.update_entity
- id: '1580937267396'
  alias: 'Kodi: Dim lights when playing'
  description: ''
  trigger:
  - entity_id: media_player.kodi
    platform: state
    to: playing
  condition:
  - condition: state
    entity_id: light.living_room
    state: 'on'
  action:
  - data:
      brightness: 5
    entity_id: light.living_room_1, light.living_room_2
    service: light.turn_on
- id: '1580937548623'
  alias: 'Kodi: Brighten lights when stop playing'
  description: ''
  trigger:
  - entity_id: media_player.kodi
    from: playing
    platform: state
    to: paused
  - entity_id: media_player.kodi
    from: playing
    platform: state
    to: idle
  - entity_id: media_player.kodi
    from: paused
    platform: state
    to: idle
  condition: []
  action:
  - data:
      brightness: 200
    entity_id: light.living_room_1, light.living_room_2
    service: light.turn_on
- id: '1581026602537'
  alias: 'Dehumidifier: Turn on'
  description: Turn on when humidity above 80
  trigger:
  - above: '80'
    entity_id: sensor.ensuite_humidity
    platform: numeric_state
  condition: []
  action:
  - data: {}
    entity_id: switch.dehumidifier
    service: switch.turn_on
- id: '1581026980222'
  alias: 'Dehumidifier: Turn off'
  description: Turn off when humidity below 70 for 5 minutes
  trigger:
  - below: '70'
    entity_id: sensor.ensuite_humidity
    for: 00:05:00
    platform: numeric_state
  condition:
  - condition: state
    entity_id: switch.dehumidifier
    state: 'on'
  action:
  - entity_id: switch.dehumidifier
    service: switch.turn_off
- id: '1581757504089'
  alias: Printer - Notify when complete
  description: Send a telegram and broadcast to Google Home when Printer is done
  trigger:
  - entity_id: binary_sensor.printer_printing
    from: 'on'
    platform: state
    to: 'off'
  condition:
  - condition: and
    conditions:
    - above: '95'
      condition: numeric_state
      entity_id: sensor.printer_job_percentage
  action:
  - data:
      message: The 3D Printer has finished
    service: notify.telegram_td
  - data:
      entity_id: media_player.living_room_display
      message: The printer has finished
    service: tts.google_translate_say
- id: '1581776307274'
  alias: 'Washer: Notify done (repeat)'
  description: ''
  trigger:
  - minutes: /15
    platform: time_pattern
  condition: []
  action:
  - data:
      entity_id: media_player.living_room_display
      message: The washing machine finished {{ relative_time(states.binary_sensor.washer.last_changed)
        }} ago, please hang out the washing
    service: tts.google_translate_say
  - data:
      title: Washing Machine
      message: ðŸ§º The washing machine finished {{ relative_time(states.binary_sensor.washer.last_changed)
        }} ago, please hang out the washing
      data:
        actions:
        - action: WASHER_EMPTIED
          title: Washer emptied
        group: Washing machine
        channel: WashingMachine
    service: notify.tom_and_anna
  mode: single
- id: '1581777155699'
  alias: 'Washer: Machine finished'
  description: ''
  trigger:
  - entity_id: binary_sensor.washer
    from: 'on'
    platform: state
    to: 'off'
  condition: []
  action:
  - entity_id: automation.washer_notify_done
    service: automation.turn_on
  - data:
      entity_id: media_player.living_room_display
      message: The washing machine has finished.
    service: tts.google_translate_say
  - service: notify.tom_and_anna
    data:
      title: Washing Machine
      message: ðŸ§º The washing machine has finished, please hang out the washing
      data:
        actions:
        - action: WASHER_EMPTIED
          title: Washer emptied
        group: Washing machine
        channel: WashingMachine
        vibrationPattern: 10, 100, 500, 100, 500, 500
  mode: single
- id: '1581777529393'
  alias: 'Washer: Handle *washer_emptied* notification response'
  description: ''
  trigger:
  - event_data:
      command: /washer_emptied
    event_type: telegram_callback
    platform: event
  - event_data:
      command: /washer_emptied
    event_type: telegram_command
    platform: event
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: WASHER_EMPTIED
  condition: []
  action:
  - entity_id: automation.washer_notify_done
    service: automation.turn_off
  - data:
      message: 'Great! The forecast for today is: {{ state_attr(''weather.millview'',
        ''temperature'') }}Â°C, {{ states(''weather.millview'')}}. Wind speed is {{
        state_attr(''weather.millview'', ''wind_speed'') }}km/h.'
      target:
      - '{{ states(''input_text.telegram_td'') }}'
      - '{{ states(''input_text.telegram_ad'') }}'
    service: telegram_bot.send_message
  mode: single
- id: '1582057191428'
  alias: Printer - Telegram command
  description: Respond to */print* Telegram command with stats about 3D printer
  trigger:
  - event_data:
      command: /printer
    event_type: telegram_callback
    platform: event
  - event_data:
      command: /printer
    event_type: telegram_command
    platform: event
  condition: []
  action:
  - data:
      message: "Status: {{ states('sensor.printer_current_state') }}  \nElapsed: {%-\
        \ if states('sensor.printer_time_elapsed') |int > 3600 -%} {{ states('sensor.printer_time_elapsed')\
        \  | multiply(0.0002777778) | round(2)}}h {%- else %} {{ states('sensor.printer_time_elapsed')}}m\
        \ {% endif %}\nRemaining: {%- if states('sensor.printer_time_remaining') |int\
        \ > 3600 -%} {{ states('sensor.printer_time_remaining')  | multiply(0.0002777778)\
        \ | round(2)}}h {%- else %} {{ states('sensor.printer_time_remaining')}}m\
        \ {% endif %} \nProgress: {{ states('sensor.printer_job_percentage') }}%\n"
    service: notify.telegram_td
- id: '1582836882523'
  alias: Blanket - turn off TD after 15m
  description: Turn off Toms blanket 15m after it is turned on
  trigger:
  - entity_id: switch.blanket_tom
    for: 00:15:00
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data: {}
    entity_id: switch.blanket_tom
    service: switch.turn_off
  mode: single
- id: '1583963701174'
  alias: Telegram - cam1
  description: ''
  trigger:
  - event_data:
      command: /cam1
    event_type: telegram_callback
    platform: event
  - event_data:
      command: /cam1
    event_type: telegram_command
    platform: event
  condition: []
  action:
  - data:
      entity_id: camera.esp32cam_one
      filename: /tmp/cam1.jpg
    service: camera.snapshot
  - delay: '5'
  - data:
      data:
        photo:
          caption: Camera 1
          url: /tmp/cam1.jpg
      message: Camera 1
    service: notify.telegram_td
- id: '1584977470639'
  alias: Telegram - Daily Beautiful News
  description: Every day send the daily Beautiful News image from https://informationisbeautiful.net/beautifulnews/
  trigger:
  - at: '14:00'
    platform: time
  condition: []
  action:
  - data: {}
    entity_id: sensor.beautifulnews
    service: homeassistant.update_entity
  - delay: '10'
  - data:
      data:
        photo:
          caption: '{{ state_attr(''sensor.beautifulnews'',''entries'')[0].title }}'
          url: '{{ (state_attr(''sensor.beautifulnews'',''entries'')[0].links | selectattr(''rel'',
            ''eq'',''enclosure'') | list)[0].href }}'
      message: test
    service: notify.telegram_td
- id: '1586469687141'
  alias: 'Globe: turn off after 30m'
  description: ''
  trigger:
  - entity_id: switch.sonoff_1000d4baef_1
    for: 00:30:00
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data: {}
    entity_id: switch.sonoff_1000d4baef_1
    service: switch.turn_off
- id: '1588449990654'
  alias: 'Garage: Notification (repeat)'
  description: At 15 min intervals (as long as > 10 mins since door opened) send a
    reminder notification
  trigger:
  - minutes: /15
    platform: time_pattern
  condition:
  - condition: template
    value_template: '{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.garage_door.last_changed)
      > 10*60 }}'
  action:
  - data:
      entity_id:
      - media_player.living_room_display
      - media_player.hallway_home
      message: The garage door was opened {{ relative_time(states.binary_sensor.garage_door.last_changed)
        }} ago.
    service: tts.google_translate_say
  - data:
      title: Garage door
      message: The garage door was opened {{ relative_time(states.binary_sensor.garage_door.last_changed)
        }} ago
      data:
        group: Garage
        channel: Garage
    service: notify.tom_and_anna
  mode: single
- id: '1588450174191'
  alias: 'Garage: Open'
  description: ''
  trigger:
  - type: opened
    platform: device
    device_id: 95b859a2f9f711eaa43c6ba5d5c98dd1
    entity_id: binary_sensor.garage_door
    domain: binary_sensor
  condition: []
  action:
  - data:
      title: Garage door
      message: The garage door was opened
      data:
        group: Garage
        channel: Garage
        vibrationPattern: 10, 100, 500, 100, 500, 500
    service: notify.mobile_app_in2013
  - data: {}
    entity_id: automation.garage_notification_repeat
    service: automation.turn_on
  - data:
      entity_id:
      - media_player.living_room_display
      - media_player.hallway_home
      message: The garage door was opened
    service: tts.google_translate_say
  mode: single
- id: '1588450370943'
  alias: 'Garage: Closed'
  description: ''
  trigger:
  - type: not_opened
    platform: device
    device_id: 95b859a2f9f711eaa43c6ba5d5c98dd1
    entity_id: binary_sensor.garage_door
    domain: binary_sensor
  condition: []
  action:
  - data:
      title: Garage door
      message: The garage door was closed
      data:
        group: Garage
        channel: Garage
        vibrationPattern: 10, 100, 500, 100, 500, 500
    service: notify.tom_and_anna
  - data: {}
    entity_id: automation.garage_notification_repeat
    service: automation.turn_off
  - data:
      entity_id:
      - media_player.living_room_display
      - media_player.hallway_home
      message: The garage door was closed
    service: tts.google_translate_say
  mode: single
- id: '1589231983089'
  alias: 'Kodi: Turn off power after shutdown'
  description: ''
  trigger:
  - entity_id: media_player.kodi
    platform: state
    to: 'off'
    for: 00:00:30
  condition: []
  action:
  - delay: 00:00:15
  - entity_id: switch.kodi
    service: switch.turn_off
  mode: single
- id: '1590597141876'
  alias: 'Lights: Turn off Seb''s light if no motion'
  description: ''
  trigger:
  - entity_id: binary_sensor.seb_d1_motion
    for: 00:10:00
    from: 'on'
    platform: state
    to: 'off'
  condition:
  - condition: device
    device_id: a5013daedfd54ea398815eb2bfaa9a66
    domain: light
    entity_id: light.seb_s_colour
    type: is_on
  - after: 07:30
    condition: time
  action:
  - device_id: a5013daedfd54ea398815eb2bfaa9a66
    domain: light
    entity_id: light.seb_s_colour
    type: turn_off
  - data:
      message: Turned off Seb's light due to no motion
    service: notify.telegram_td
- id: '1591347836942'
  alias: 'Lights: Turn off Reu''s light if no motion'
  description: ''
  trigger:
  - entity_id: binary_sensor.reu_d1_motion
    for: 00:10:00
    from: 'on'
    platform: state
    to: 'off'
  condition:
  - condition: device
    device_id: 619a3f0d60bb4d59acaad81904062bf8
    domain: light
    entity_id: light.reuben_ceiling
    type: is_on
  - after: 07:30
    condition: time
  action:
  - data: {}
    entity_id: light.reubens_bedroom
    service: light.turn_off
  - data:
      message: Turned off Reu's light due to no motion
    service: notify.telegram_td
- id: '1592899929119'
  alias: 'Lights: Turn off the main bedroom lights at 8am'
  description: ''
  trigger:
  - at: 08:00
    platform: time
  condition: []
  action:
  - device_id: 9a9d18e0bac44a38a143ed6f268f38a4
    domain: light
    entity_id: light.main_bedroom_bloom
    type: turn_off
  - device_id: 5f159654348248d4a706a85a40b381ba
    domain: light
    entity_id: light.main_bedroom_ceiling
    type: turn_off
- id: '1600196508217'
  alias: Daily camera photo - Nexus
  description: ''
  trigger:
  - at: '11:00:00'
    platform: time
  condition: []
  action:
  - data:
      entity_id: camera.ip_webcam
      filename: /config/www/cams/ipcam_{{ states('sensor.date') }}.jpg
    service: camera.snapshot
  mode: single
- id: '1600335652412'
  alias: ESP32 Cam timelapse
  description: ''
  trigger:
  - entity_id: switch.esp32cam_status
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - after: sunrise
    before: sunset
    condition: sun
  action:
  - data:
      value: '{{ states(''sensor.date'') }}_{{ states(''sensor.time'') }}'
    entity_id: input_text.image_timestamp
    service: input_text.set_value
  - data:
      entity_id: camera.esp32cam_one
      filename: /config/www/cams/esp32cam_{{ states('input_text.image_timestamp')
        }}.jpg
    entity_id: camera.esp32cam_one
    service: camera.snapshot
  - delay: 00:00:02
  - data:
      entity_id: camera.esp32cam_lastimage
      file_path: /config/www/cams/esp32cam_{{ states('input_text.image_timestamp')
        }}.jpg
    service: local_file.update_file_path
  mode: single
- id: handle_tag_scan
  alias: 'NFC: Media Player'
  mode: single
  variables:
    media_players:
      e4fe6e4208d711eb87685b946672c241: media_player.kitchen_chromecast
      c3bd660708d811ebac3afd455d849421: media_player.reuben_s_room_speaker
    tags:
      04-2F-8B-FA-90-49-81:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2FqBdQcfPIY4UJfmVC4mqj%2Frecordings%2FBZFoJspmw9K9IwlQMz8J%2Frecordings%2Faudio.mp3?alt=media&token=f46db5de-43c6-4283-9e61-1397aa1ac46d
        media_content_type: music
      0e179e79-1604-4fc8-bb2c-4b28a59f9ea1:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2FqBdQcfPIY4UJfmVC4mqj%2Frecordings%2FBZFoJspmw9K9IwlQMz8J%2Frecordings%2Faudio.mp3?alt=media&token=f46db5de-43c6-4283-9e61-1397aa1ac46d
        media_content_type: music
      04-B0-A4-EA-41-2B-80:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2F6WI5vrqc6snoccsxsUV2%2Frecordings%2FTdQPRZxJpMG8w6xA3asa%2Frecordings%2Faudio.mp3?alt=media&token=ee3e9093-f4b5-44c6-8571-f362cc2a884c
        media_content_type: music
      b8777c03-86f1-48cd-a844-d14bb6d0a59e:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2F6WI5vrqc6snoccsxsUV2%2Frecordings%2FTdQPRZxJpMG8w6xA3asa%2Frecordings%2Faudio.mp3?alt=media&token=ee3e9093-f4b5-44c6-8571-f362cc2a884c
        media_content_type: music
      B9-17-08-8E:
        media_content_id: https://chtbl.com/track/43774/traffic.megaphone.fm/SONY2917056284.mp3
        media_content_type: music
      87-61-95-5F:
        media_content_id: https://www.dropbox.com/s/uowksapxv8nb8se/08%20-%20Come%20What%20May.mp3?dl=1
        media_content_type: music
      04-0F-81-FA-90-49-81:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2FGH4ZnxM7M8oxbVZEmV4T%2Frecordings%2FOZljR1hXy7orkCBrha9f%2Frecordings%2Faudio.mp3?alt=media&token=9d6f367f-4521-4e0b-9b7d-66500f2ef836
        media_content_type: music
      04-1B-81-FA-90-49-81:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2FZTe10kJMfXgNaiSCsStC%2Frecordings%2FKksLQS6LUXWLrBbtDusZ%2Frecordings%2Faudio.mp3?alt=media&token=46232d75-e430-4b11-a532-4185a96a34dd
        media_content_type: music
      04-27-81-FA-90-49-81:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2F0CSxJ7wAn8p7s6adeqAx%2Frecordings%2F82kgp14YF6iJtU77IaSd%2Frecordings%2Faudio.mp3?alt=media&token=68bdd707-2f64-47a6-9887-8b86dd6b73d4
        media_content_type: music
      04-21-81-FA-90-49-81:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2FvGG2EXQ9sp2HOS9f74UB%2Frecordings%2FfKgkUvjMMQZYIM5XT2Wd%2Frecordings%2Faudio.mp3?alt=media&token=096ef499-c35d-44fa-a9eb-2c9ca5cb9ec0
        media_content_type: music
      04-7E-6E-62-90-6B-80:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2FEfVUE7f9cD3ggPOJG3WG%2Frecordings%2F5YLWhtixOsEX4ju064js%2Frecordings%2Faudio.mp3?alt=media&token=60cd78ce-af61-4982-86b7-604a6ddf7985
        media_content_type: music
      04-15-81-FA-90-49-81:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2FQkcZLdHAK2DgO8L8FDgG%2Frecordings%2FDGc9pUmUPbzHwhAvImCc%2Frecordings%2Faudio.mp3?alt=media&token=2e7a5558-c610-44d8-b03f-534e0b1f2a24
        media_content_type: music
      04-82-6E-62-90-6B-80:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2F6aOQWFLcP8N40QSpBiVL%2Frecordings%2Frxu1QkpPKd9wYwX2094m%2Frecordings%2Faudio.mp3?alt=media&token=964f2092-cd0d-4f29-a0f9-cbd1cc3670a3
        media_content_type: music
      04-64-7F-62-EC-6B-81:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2FWAmgOrvRTRaoApufBwFJ%2Frecordings%2F8OwDv4WuCySO2j6tBAkd%2Frecordings%2Faudio.mp3?alt=media&token=b34ac6ea-9052-4a30-9f86-788f7a39e438
        media_content_type: music
      04-68-7F-62-EC-6B-81:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2FtfRd0ncTBChvgHQM0jjk%2Frecordings%2Fa7VgLNATEVtB6P3avoE3%2Frecordings%2Faudio.mp3?alt=media&token=5cdd84c4-2930-4bec-bfd2-e48cc8d579a6
        media_content_type: music
      04-7A-6E-62-90-6B-80:
        media_content_id: https://firebasestorage.googleapis.com/v0/b/storytime-7c623.appspot.com/o/stories%2F6WD7fy4W11bVKV2Gd8o9%2Frecordings%2FCToJUbTb6lN9gitTkCNd%2Frecordings%2Faudio.mp3?alt=media&token=065cf49f-b8bc-4ba3-9cb4-304d2ebd64ff
        media_content_type: music
  trigger:
    platform: event
    event_type: tag_scanned
  condition:
  - '{{ trigger.event.data.tag_id in tags }}'
  - '{{ trigger.event.data.device_id in media_players }}'
  action:
  - variables:
      media_player_entity_id: '{{ media_players[trigger.event.data.device_id] }}'
      media_content_id: '{{ tags[trigger.event.data.tag_id].media_content_id }}'
      media_content_type: '{{ tags[trigger.event.data.tag_id].media_content_type }}'
  - service: media_player.play_media
    data:
      entity_id: '{{ media_player_entity_id }}'
      media_content_id: '{{ media_content_id }}'
      media_content_type: '{{ media_content_type }}'
  - delay: 5
- id: '1602617983905'
  alias: 'Zoom: Notify start/end call'
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.zoom_tomBJSS
  condition: []
  action:
  - variables:
      zoom_status: empty
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.zoom_tomBJSS
        state: 'on'
      sequence:
      - service: tts.google_translate_say
        data:
          message: Tom has started a zoom meeting
        entity_id: media_player.bedroom_2_speaker
    - conditions:
      - condition: state
        entity_id: binary_sensor.zoom_tomBJSS
        state: 'off'
      sequence:
      - service: tts.google_translate_say
        data:
          message: Tom has ended a zoom meeting
        entity_id: media_player.bedroom_2_speaker
  - delay:
      seconds: 10
  mode: single
- id: '1603313648727'
  alias: Bedtime - phone charging
  description: Turn off light, turn on lamp, when phone starts charging
  trigger:
  - type: plugged_in
    platform: device
    device_id: cf4ceb29a2e7464abe92c738f5983356
    entity_id: binary_sensor.in2013_is_charging
    domain: binary_sensor
  - type: plugged_in
    platform: device
    device_id: 5fe5c0fe0b3111eb8c0681a6c5c84147
    entity_id: binary_sensor.moto_g_5g_plus_is_charging
    domain: binary_sensor
  condition:
  - condition: time
    after: '21:30'
  - condition: device
    type: is_on
    device_id: 5f159654348248d4a706a85a40b381ba
    entity_id: light.main_bedroom_ceiling
    domain: light
  action:
  - type: turn_on
    device_id: 9a9d18e0bac44a38a143ed6f268f38a4
    entity_id: light.main_bedroom_bloom
    domain: light
  - type: turn_off
    device_id: 5f159654348248d4a706a85a40b381ba
    entity_id: light.main_bedroom_ceiling
    domain: light
  mode: single
