'1581685010172':
  alias: Turn off all lights and switches
  sequence:
  - data:
      entity_id: all
    service: light.turn_off
  - data: {}
    entity_id: switch.christmas_star
    service: switch.turn_off
  - entity_id: switch.sonoff_10001f5fa0
    service: switch.turn_off
toggle_dnd:
  alias: Toggle DND
  sequence:
  - service: input_boolean.toggle
    target:
      entity_id: input_boolean.do_not_disturb
  mode: single
  icon: mdi:volume-off
fade_volume:
  alias: Fade the volume of a media player
  mode: parallel
  fields:
    target_player:
      name: Target media player
      description: Target media player of volume fade.
      required: true
      example: media_player.lounge_sonos
      selector:
        entity:
          domain: media_player
    target_volume:
      name: Target volume
      description: Volume the media play will be at the end of the fade duration.
      required: true
      default: 0.5
      example: '0.5'
      selector:
        number:
          max: 1
          min: 0
          step: 0.01
          mode: slider
    duration:
      name: Fade duration
      description: Length of time in seconds the fade should take.
      required: true
      default: 5
      example: '5'
      selector:
        number:
          mode: box
          min: 0
          max: 100000
          unit_of_measurement: s
    curve:
      name: Fade curve algorithm
      description: Shape of the fade curve to apply.
      required: true
      default: logarithmic
      example: logarithmic
      selector:
        select:
          options:
          - logarithmic
          - bezier
          - linear
  variables:
    steps_per_second: 10
    total_steps: '{{ (steps_per_second * duration) | int(0) }}'
    start_volume: '{{ state_attr(target_player, ''volume_level'') | float(0) }}'
    start_diff: '{{ (target_volume - start_volume) | float(0) }}'
  sequence:
  - repeat:
      while:
      - condition: template
        value_template: '{{ repeat.index < total_steps }}'
      - condition: template
        value_template: '{{ ((state_attr(target_player, "volume_level") - target_volume)
          | abs) > 0.001 }}'
      sequence:
      - service: media_player.volume_set
        data_template:
          entity_id: '{{ target_player }}'
          volume_level: "{% set t = repeat.index / total_steps %} {% if curve == 'logarithmic'
            %}\n  {{ (start_volume + (t / (1 + (1 - t))) * start_diff) | float(0)
            }}\n{% elif curve == 'bezier' %}\n  {{ (start_volume + (t * t * (3 - 2
            * t)) * start_diff) | float(0) }}\n{% else %}\n  {{ (start_volume + t
            * start_diff) | float(0) }}\n{% endif %}\n"
      - delay: '00:00:00.1'
  - service: media_player.volume_set
    data_template:
      entity_id: '{{ target_player }}'
      volume_level: '{{ target_volume }}'
  icon: mdi:tune-vertical
nudge_blind_open:
  alias: nudge_blind_open
  fields:
    target_blind:
      name: Target blind
      description: Target blind to nudge.
      required: true
      example: cover.office_blind
      selector:
        entity:
          domain: cover
  sequence:
  - service: cover.set_cover_position
    target:
      entity_id: '{{target_blind}}'
    data_template:
      position: '{{  min([100,states.number.office_blind_analog_output.state | int
        + 10]) }}'
  mode: single
  icon: mdi:archive-arrow-up
nudge_blind_closed:
  alias: nudge_blind_closed
  fields:
    target_blind:
      name: Target blind
      description: Target blind to nudge.
      required: true
      example: cover.office_blind
      selector:
        entity:
          domain: cover
  sequence:
  - service: cover.set_cover_position
    target:
      entity_id: '{{target_blind}}'
    data_template:
      position: '{{  max([0,states.number.office_blind_analog_output.state | int -
        10]) }}'
  mode: single
  icon: mdi:archive-arrow-down
nudge_light_brighter:
  alias: nudge_light_brighter
  fields:
    target_light:
      name: Target light
      description: Target light to nudge.
      required: true
      example: light.office_ceiling
      selector:
        entity:
          domain: light
  sequence:
  - service: light.turn_on
    data:
      entity_id: '{{ target_light }}'
      brightness: '{{  min([255,states.light.second_bedroom_ceiling.attributes.brightness
        | int + 25]) }}'
  mode: single
  icon: mdi:upload
nudge_light_dimmer:
  alias: nudge_light_dimmer
  fields:
    target_light:
      name: Target light
      description: Target light to nudge.
      required: true
      example: light.office_ceiling
      selector:
        entity:
          domain: light
  sequence:
  - service: light.turn_on
    data:
      entity_id: '{{ target_light }}'
      brightness: '{{  max([0,states.light.second_bedroom_ceiling.attributes.brightness
        | int - 25]) }}'
  mode: single
  icon: mdi:upload
kitchen_dashboard:
  sequence:
  - service: cast.show_lovelace_view
    data:
      entity_id: media_player.kitchen_display
      dashboard_path: live-energy
      view_path: cast
  mode: single
  icon: mdi:home-battery-outline
energy_dashboard:
  alias: EnergyDashboard
  sequence:
  - service: cast.show_lovelace_view
    data:
      entity_id: media_player.living_room_display
      dashboard_path: live-energy
      view_path: cast
  mode: single
  icon: mdi:home-battery-outline
solax_force_charge:
  alias: Force Charge Solax Battery
  sequence:
  - data:
      level: '{{states(''input_number.solax_battery_soc_target'') | int}}

        '
    action: rest_command.solax_local_charge_battery_from_grid
  - delay:
      seconds: 10
  - data:
      value: '{{now().hour + now().minute * 256}}

        '
    action: rest_command.solax_local_set_forced_charge_start
  - data:
      message: 'Home battery set to charge from grid. Target: {{states(''input_number.solax_battery_soc_target'')}}%
        Solar Forecast: {{states(''sensor.solcast_pv_forecast_forecast_today'')| round(2)}}kWh'
      title: "\U0001F324 Solar"
    action: notify.mobile_app_toms_phone
  - delay:
      seconds: 10
  - data: {}
    target:
      entity_id: sensor.solax_rest_local_settings
    action: homeassistant.update_entity
  - wait_template: '{{states(''sensor.solax_local_battery_soc'')|int >= states(''input_number.solax_battery_soc_target'')|int}}'
    timeout:
      minutes: '{{states(''input_number.solax_force_charge_duration_mins'') | int}}'
  - data:
      level: '{{10 if now().hour > 16 else 100}}

        '
    action: rest_command.solax_local_charge_battery_from_grid
  - delay:
      seconds: 10
  - data:
      value: "{{5 + 30 * 256}}  \n"
    action: rest_command.solax_local_set_forced_charge_start
solax_reset_force_charge:
  sequence:
  - data:
      level: '{{10 if now().hour > 16 else 100}}

        '
    action: rest_command.solax_local_charge_battery_from_grid
  - delay:
      seconds: 10
  - data:
      value: '{{5 + 30 * 256}}

        '
    action: rest_command.solax_local_set_forced_charge_start
  - delay:
      seconds: 10
  - data: {}
    target:
      entity_id:
      - sensor.solax_rest_local_settings
    action: homeassistant.update_entity
